컴파일러 : 프로그래밍 언어로 작성한 소스코드를 기계어로 변환해주는 프로그램
컴파일 : 소스코드 -> 기계어로 변환하는 과정

주석문
    여러 줄 : /*  */  한 줄 : //

선행처리 지시자 : #  명령어 앞에 # 기호를 붙여서 표현 ex) #include, #define

표준 출력 형식 지정자 : 처리하고자 하는 데이처 값의 유형에 따라 표준 출력 형식 지정자 선택 
    ex) %d, %f, %c, %s
    정수 실수 문자 문자열

scanf() 기본 사용법
    scanf("표준 출력 형식 지정자", &변수명)  scanf() 에는 제어문자 사용불가 ex) \n,\t   

배열 선언 방법
    ex) char str[10];   *배열은 scanf()에서 주소연산자& 생략 -> 배열의 변수명이 배열의 주소를 가르킴킴
    배열 초기화 char str[30] = ""

자료형
    정수형  short   int    long    longlong
            2byte   4byte   4byte   8byte
    실수형  float   double  longdouble
            4byte   8byte   8byte
    문자형  char
            1byte

*변수를 선언하면 변수 이름으로 자료형의 크기만큼 메모리 공간 확보

캐스트 연산사 : 자료형을 바꿔주는 연산자
    ex) int num1 = 30
        float num2 = 1.5                int num은 메모리 상에 그대로 있고 float num을 새로 복사해서 만들어냄냄
        result = (float)num1 / num2

상수 : 변수에 대입되는 값, 프로그램 수행중에 변하지 않는 데이터
    문자형 상수 : '' 작은 따옴표로 묶음
    문자열 상수 : "" 큰 따옴표로 묶음

int는 부호비트와 지수부로 이루어짐     float, double은 부호비트와 지수부, 가수부로 이루어짐 
이유는 int와 float,double은 표현 방법이 다르기 때문이다
소수는 컴퓨터에서 부동소수점 방식을 사용하기 때문    ex) 1.23 -> 123 * 10**-2

포인터 변수 : 주소를 갖고 있는 변수를 의미. 변수명 앞에 * 선언
    ex) char *point = "hello";    변수 point는 "hello" 의 주소를 가지고 있음

const 키워드 : 변수에 대입한 값이 변하지 않도록 정의함. 
    const가 붙은 변수는 상수로 취급하여 불변의 값을 가짐
    ex) const int a = 3;



