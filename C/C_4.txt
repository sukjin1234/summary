배열
    같은 종류의 자료형을 선언하기 위해 구성된 데이터의 집합

    배열 선언
        자료형 변수명 [크기] = {요소}
        ex) int arr[3] = {1,2,3}
    
2차원 배열
    자료형 변수명[행][열]   행 : 가로 / 열 : 세로
    ex) int arr[2][3]

배열 요수 개수 구하기
    sizeof(배열이름) : 전체 배열의 크기
    sizeof(배열이름[0]) : 배열 요소의 크기     ** sizeof(배열이름)/sizeof(배열이름[0]) -> 배열 요수 개수

포인터
    데이터나 프로그램이 저장되어 있는 메모리 주소를 지정하는 변수를 의미
    메모리 공간의 주소를 가지고 있는 변수 뜻함

포인터 증감 연산과 메모리 주소 
    *p++    ++의 우선순위가 *보다 높지만 뒤에 선언되었으므로      주소값 
            *p를 먼저 수행한 후 p++를 수행하여 주소값 1 증가↑
    
    (*p)++  괄호 안에 있는 *연산자가 먼저 수행하고 포인터 p가     데이터값
            가르키는 주소의 데이터 값 1 증가↑

    *++p    *보다 ++의 우선순위가 높으므로 포인터 p가 가르키는 주소값을        데이터값, 주소값
            먼저 증가 시키고 변동된 주소에 저장되어 있는 데이터 값을 참조

    ++*p    포인터 p가 가르키는 주소의 데이터 값을 1증가 시킨 다음          데이터 값값
            그 데이터 값을 참조

배열과 포인터를 사용한 문자열 처리 
    
        구분            배열 사용                   포인터 사용

    배열 요소       문자열을 구성하는 각각의    문자열이 저장된
                    문자가 요소값으로 저장      주소값만 소유유

    메모리 공간     배열의 자료형 크기만큼      문자열을 메모리에 따로 저장장   
                    확보                        포인터와 문자열 크기를 더한 공간 필요요

    문자열 상수     char형 배열로 선언          포인터 선언

C언어는 배열을 구성하는 배열 요소에 제한이 없으므로 배열도 배열 요소로 사용할 수 있음

배열을 배열 요소로 사용하기 위해서는 포인터가 배열 요소인 포인터 배열을 사용해야함
) 자료형 *배열이름[배열크기]
ex) char *point[2] = {"study","coding"}
    -> point[0]은 "study"가 저장된 메모리 주소를 가르킴

포인터 배열은 메모리를 가변적으로 사용할 수 있어서 더욱 효율적이다.