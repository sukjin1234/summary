파일 & 폴더(디렉토리) & 경로 개념
    파일 : 운영체제나 프로그램에서 사용할 수 있는 데이터의 모임

    파일의 종류
        구분 방법 : 문자로 해석이 가능한 파일
            바이너리 파일(특수용) : mp3, .png, .exe, ...
            텍스트 파일(범용) : .txt, .csv, .html, ...
    
    폴더(디렉토리) : 파일을 그룹별로 관리하기 위한 모임
    경로 : 파일이나 폴더의 위치
        절대경로 : 최상위 경로부터 현재 위치까지 전부 적는 방법
        상대경로 : 프로그램이 실행하고 있는 폴더를 기준으로 파일의 위치를 찾는 방법

파일 처리
    파일(자원) 접근법
        열기 -> 처리 -> 파일

    열기                                            'r' : 읽기모드
        파일객체 = open(파일이름, 파일열기 모드)    'w' : 쓰기모드
                                                    'a' : 추가모드
    작업
        파일 쓰기
            파일객체.write(데이터)
        파일 읽기
            @ 한 줄 씩 문자열로 읽기
                변수 = 파일객체.readline()  # 문자열 반환
            @ 줄 단위의 데이터를 리스트로 한 번에 읽기
                변수 = 파일객체.readlines()  # 문자열 리스트를 반환
            @ 전체 파일을 문자열 하나로 읽기
                변수 = 파일객체.read()  # 문자열 반환

        닫기
            파일객체.close()

'w' 쓰기모드는 기존 파일이 없으면 새로 만들어진다.
'a' 추가모드는 기존 파일이 있으면 기존 내용 뒤에 쓰고, 없으면 새로 파일을 만들어 쓴다
'r' 읽기모드는 기존 파일이 있으면 읽고, 없으면 에러가 발생한다.
    -> 파일을 읽을 때 줄바꿈까지 읽음

with 문
    file 처리를 할 때, 반드시 open() 후 close()를 실행해야 다른 곳에서 해당 파일을 사용할 수 있다.
    프로그래머가 close()를 종종 실행하지 않아 문제가 발생한다.
    이를 자동으로 방지하는 문장이다

    with open(파일명, 모드) as 객체명:      with 문이 끝나면 자동으로 close()
        실행문장 ...

os 모듈을 사용하여 파일, 폴더(디렉토리) 다루기
    import os
    
    파일                                    폴더
        파일 존재 여부                          폴더 존재 여부
            os.path.exists(파일경로)                os.path.exists(폴더경로)
            os.path.isfile(파일경로)                os.path.isdir(폴더경로)
        
        파일 삭제                           폴더 생성
            os.remove(파일경로)                 os.makedirs(폴더경로)
                                                os.mkdir(폴더경로)

        기타                                폴더 삭제
            경로 연결                          os.rmdir(폴더경로)
                os.path.join(a,b)                   삭제 전 폴더 안의 모든 파일을 삭제
            파일명 확장자 분리
                os.path.splitext(파일이름)
            
lambda 람다
    간단한 함수를 간결하게 만들 때, 사용
        함수를 정의할 정도로 복잡하지 않거나, 사용할 수 없는 곳에 주로 쓰임
        자동으로 return 명령 없이 결과값을 돌려준다.
    
    ex) add = lambda a, b: a+b
        result = add(1,2)