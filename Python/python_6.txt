****** class
    python의 모든 자료형은 class로 만든다
        int, str, float, list, dictionary, tuple ...

    class를 설계하여 해당 자료형이 갖고 있어야 하는 값(들)과 기능(들)을 정의하고, 
    해당 class의 생성자를 통해 실제 값을 만들어 낸다.


    class : 자료형
    instance : 실제 자료형으로 존재하는 값(object)
    ex) int : class , 1 : int의 instance (int의 실제 존재하는 객체)

    ex) class Test: 
            def __init__(self):
                self.name = ""
                self.age = ""

메소드 Method : 클래스 안의 함수
    클래스(자료형)만의 전용 함수
    클래스에 의해서 만들어진 값만이 호출할 수 있는 함수
    메소드의 매개변수 중 제일 앞에 self 변수를 지정한 함수

    특별 메소드, Special Method
        _로 시작해서, _로  끝나는 메소드
        매직 메소드, Magic Method
        
        종류
            __init__
                생성자 -클래스 이름()- 를 호출할 때 자동으로 실행, 인스턴스 초기화에 관여
            __str__
                객체를 인쇄 가능한 형식으로 사용할 때 자동 실행
            기타 : 매우 많음

    생성자, Constructor
        관련한 메소드 중 __init__() 메소드가 중요
            생성자 호출 -> __new__() : 인스턴스 생성 -> __init__(): 인스턴스 초기화
        해당 클래스의 인스턴스가 생성할 때, 처음 한 번 실행하는 메소드
        생성한 인스턴스가 갖고 있어야 하는 기본 정보를 설정할 때 가장 많이 사용

        __str__() -> return 값을 문자열로 할 수 있음

모듈 module
    함수, 클래스, 변수 등을 담고 있는 하나의 파일
    즉, python 파일(.py) 하나가 하나의 모듈이라 할 수 있음
    모듈을 다른 파일에 쓰고 싶으면 import

    모듈 불러오기
        1) import
        2) from ... import ...  -> 모듈에서 가지고 오고 싶은 걸 골라 가져올 수 있음
                            * -> 모두
        3) import ... as 변수명   -> 모듈을 변수명으로 불러서 사용 가능

    __name__
        내부적으로 사용하는 특수 변수
        __name__ 변수는 실행하는 파일에 있을 경우 "__main__"를 가리킨다
        그 외의 파일에서는 __name__ 변수는 모듈의 이름을 저장한다.

예외처리
    파이썬에서 발생하는 오류는 프로그램에서 발생하는 문제의 원인을 알려주고 그 원인을 프로그램이 판단하여 스스로 처리할 수 있도록 한다

    오류 예외 처리 기법
        try - except 문

        try : 
            # 실행
        except:             #실행 도중에 오류가 발생하면 # 실행의 나머지는 실행되지 않고
            # 오류처리          즉시 except로 이동하여 #오류처리를 실행한다
        
    except 구문의 3가지 방법
        except : 오류의 종류와 상관없이 실행
        except 발생_오류 : 발생_오류와 동일한 경우에만 수행
        except 발생_오류 as 오류_변수 : 발생_오류와 동일 경우에 실행하고 오류 내용까지 알고 싶을 때 사용

        try - finally 문

        try :
            #실행               #실행이 완료 되어도 도중에 실행되지 않아도 마지막에 항상 수행해야 하는
        finally :               내용이 있다면 #종료처리 부분에 구현한다.
            # 종료 처리
        
    여러 개의 오류 처리
        try : 
            #실행
        except 발생_오류1:
            #오류처리 
        except 발생_오류2:
            #오류처리 
        except 발생_오류n:
            #오류처리 
        except:
            #오류처리 

    try - else 구문
        
        try : 
            #실행
        except:                     try구문의 #실행이 오류없이 정상적으로 수행한 경우에만 실행행
            #오류처리 
        else:
            #정상처리

    오류 발생하기
        raise NotImplementedError
        